%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2508 2490
%%HiResBoundingBox: 0 0 2507.04 2489.04
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2507.04 2489.04 re
W
q
[0.24 0 0 -0.24 0 2489.04] cm
q
0 0 10445.832 10367.7148 re
W*
q
[3.124821 0 0 3.125014 0 0.0158699] cm
/DeviceRGB {} CS
[0 0.0157 0.2353] SC
/DeviceRGB {} cs
[0 0.0157 0.2353] sc
0 0 3342.8572 3318.6438 re
f
Q
q
[91.984627 0 0 91.990288 539.77191 534.88922] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
101.800003 83.599998 m
101.600006 54.099998 l
101.600006 48.099998 101.700005 41.899998 101.400009 36.099998 c
101.300011 33.599998 101.300011 30.999998 101.300011 28.299999 c
101.300011 23.599998 101.200012 19.299999 100.900009 15.099999 c
100.700012 10.9 l
100.600014 8.2 100.500015 5.599999 100.400009 2.9 c
100.400009 1 l
93.100006 1 l
77.199997 0.7 l
66.599998 0.7 l
64.74501 0.701508 62.911678 0.901508 61.099998 1.3 c
60.5 1.6 l
49.799999 1.6 l
49.700001 1.4 49 1.3 47.599998 1.2 c
34.299999 0.3 l
28.03093 -0.119242 21.764263 -0.085909 15.5 0.4 c
12.3 0.6 9 0.8 4.6 0.9 c
1.5 0.5 l
0.4 0.5 l
0.4 1.7 l
0.2 3.7 0.1 6 0.1 8.7 c
0.1 11.4 0.1 15.5 -0 18.9 c
-0.1 22.299999 -0 24.200001 -0 26.9 c
-0.05565 29.21096 0.077683 31.510962 0.4 33.799999 c
0.569595 34.759468 0.669595 35.726135 0.7 36.700001 c
0.8 40.5 1.1 41.5 1.5 42.200001 c
1.5 59.800003 l
1.3 60.300003 l
1.4 64.300003 1.2 67.900002 1.1 71.600006 c
0.8 79.000008 0.7 86.600006 1 94.100006 c
1.008181 95.749512 1.174848 97.382843 1.5 99.000008 c
1.5 99.800011 l
6 99.800011 l
5.8 100.000008 l
11.200001 100.000008 l
14.077962 99.890518 16.944628 100.023849 19.800001 100.400009 c
21.057598 100.614899 22.324265 100.714897 23.6 100.700012 c
30.200001 100.600014 36.299999 100.800011 42.5 101.100014 c
49.200001 101.100014 l
63.099998 100.800011 l
69.199997 100.700012 75 100.300011 81.399994 100.300011 c
91.099991 100.300011 l
94.599991 100.100014 l
97.399994 99.600014 l
99.699997 99.600014 l
99.699997 98.600014 l
100 100.200012 100.299995 100.000015 100.699997 97.800011 c
100.799995 97.200012 100.899994 96.500008 101 95.800011 c
101.100006 95.100014 101.300003 93.200012 101.5 92.400009 c
101.852669 89.475288 101.952675 86.541954 101.800003 83.600006 c
101.800003 83.599998 l
h
f
Q
Q
q
3696.2173 2250.0256 3112.9648 3085.7278 re
W*
q
[34.283752 0 0 34.285862 3524.7986 2078.5964] cm
/DeviceRGB {} CS
[0 0.0157 0.2353] SC
/DeviceRGB {} cs
[0 0.0157 0.2353] sc
32.400002 40.200001 m
33.700001 42.5 l
25.400002 42.5 l
26.700001 40.200001 l
26.800001 40 27 39.900002 27.1 39.900002 c
32 39.900002 l
32.200001 39.900002 32.299999 40.099998 32.400002 40.200001 c
34.200001 43.799999 m
34.200001 43.700001 34.100002 43.599998 34 43.599998 c
32.200001 43.899998 l
32.100002 43.899998 32 43.999996 31.900002 44.099998 c
31.600002 44.699997 l
31.500002 44.799995 31.600002 44.899998 31.700003 44.899998 c
32.000004 44.899998 l
32.400005 44.899998 l
34 44.899998 l
34.099998 44.899998 34.200001 44.799999 34.200001 44.699997 c
34.200001 43.799999 l
27.4 44.200001 m
27.299999 44.100002 27.199999 44 27.1 44 c
25.300001 43.700001 l
25.200001 43.700001 25.1 43.799999 25.1 43.900002 c
25.1 44.800003 l
25.1 44.900002 25.200001 45.000004 25.300001 45.000004 c
27.000002 45.000004 l
27.400002 45.000004 l
27.700001 45.000004 l
27.800001 45.000004 27.900002 44.900005 27.800001 44.800003 c
27.4 44.200001 l
h
77.300003 5 m
67.100006 5 58.800003 13.3 58.800003 23.5 c
58.800003 25.200001 59.000004 26.9 59.500004 28.4 c
51.700005 32.900002 l
46.800003 27.200001 39.600006 23.500002 31.500004 23.500002 c
16.9 23.5 5 35.400002 5 50 c
5 64.599998 16.9 76.5 31.5 76.5 c
39.599998 76.5 46.900002 72.800003 51.700001 67.099998 c
59.400002 71.599998 l
59 73.199997 58.700001 74.799995 58.700001 76.5 c
58.700001 86.699997 67 95 77.199997 95 c
87.399994 95 95.699997 86.699997 95.699997 76.5 c
95.699997 66.300003 87.400002 58 77.199997 58 c
72 58 67.399994 60.099998 63.999996 63.5 c
56.400002 59 l
57.400002 56.200001 58 53.200001 58 50 c
58 46.799999 57.400002 43.799999 56.400002 41 c
64.099998 36.5 l
67.5 39.900002 72.099998 42 77.299995 42 c
87.499992 42 95.799995 33.700001 95.799995 23.5 c
95.800003 13.3 87.599998 5 77.300003 5 c
67.199997 86.699997 m
67.199997 83.599998 l
67.199997 80.400002 71.699997 77.900002 77.299995 77.900002 c
82.899994 77.900002 87.399994 80.5 87.399994 83.599998 c
87.399994 86.699997 l
67.199997 86.699997 l
h
67.199997 33.799999 m
67.199997 30.699999 l
67.199997 27.499998 71.699997 25 77.299995 25 c
82.899994 25 87.399994 27.6 87.399994 30.700001 c
87.399994 33.799999 l
67.199997 33.799999 l
h
82.699997 18.6 m
82.699997 21.6 80.299995 23.900002 77.399994 23.900002 c
74.399994 23.900002 72.099991 21.500002 72.099991 18.600002 c
72.099991 15.600002 74.499992 13.300002 77.399994 13.300002 c
80.300003 13.3 82.699997 15.7 82.699997 18.6 c
82.699997 71.599998 m
82.699997 74.599998 80.299995 76.900002 77.399994 76.900002 c
74.399994 76.900002 72.099991 74.5 72.099991 71.599998 c
72.099991 68.699997 74.499992 66.299995 77.399994 66.299995 c
80.300003 66.199997 82.699997 68.599998 82.699997 71.599998 c
35.099998 42.900002 m
35 42.900002 34.799999 43 34.699997 43 c
34.499996 43 l
34.799995 43.5 l
34.799995 43.700001 34.799995 43.700001 34.799995 43.799999 c
34.799995 47 l
34.799995 47.299999 l
34.799995 48 l
34.799995 48.200001 34.699997 48.299999 34.499996 48.299999 c
33.399998 48.299999 l
33.199997 48.299999 33.099998 48.200001 33.099998 48 c
33.099998 47.400002 l
26.299999 47.400002 l
26.299999 48 l
26.299999 48.200001 26.199999 48.299999 26 48.299999 c
24.9 48.299999 l
24.699999 48.299999 24.6 48.200001 24.6 48 c
24.6 47.099998 l
24.6 46.799999 l
24.6 43.700001 l
24.6 43.700001 24.6 43.600002 24.6 43.400002 c
24.9 42.900002 l
24.699999 42.900002 l
24.599998 42.900002 24.4 42.800003 24.299999 42.800003 c
24.199999 42.800003 l
24.099998 42.800003 23.999998 42.700005 24.099998 42.600002 c
24.399998 42.100002 l
24.499998 42.000004 24.599998 41.900002 24.699997 41.900002 c
25.399998 41.900002 l
26.499998 39.900002 l
26.699999 39.600002 26.999998 39.400002 27.299997 39.400002 c
32 39.400002 l
32.299999 39.400002 32.599998 39.600002 32.799999 39.900002 c
33.899998 41.800003 l
34.599998 41.800003 l
34.699997 41.800003 34.799999 41.900002 34.899998 42.000004 c
35.199997 42.500004 l
35.299999 42.700001 35.200001 42.799999 35.099998 42.900002 c
h
38.599998 47.299999 m
40.099998 47.899998 40.899998 49.200001 41.599998 50.399998 c
42.099998 51.199997 42.599998 52.099998 43.299999 52.499996 c
44 52.899998 44.700001 53.499996 45.200001 54.099995 c
45.700001 54.799995 46 55.599995 46 56.499996 c
45.900002 59.999996 46.200001 61.599995 46.700001 64.399994 c
46.900002 65.299995 47.100002 66.299995 47.200001 67.499992 c
47.5 68.199989 47.200001 68.899994 46.600002 69.499992 c
46.200001 69.899994 45.500004 70.299995 44.800003 70.599991 c
44.100002 70.899994 43.300003 71.099991 42.500004 71.299988 c
40.200005 71.799988 37.700005 71.699989 37.000004 70.599991 c
37.000004 70.499992 36.900005 70.499992 36.900005 70.399994 c
36.800007 70.199997 36.800007 70.099991 36.700005 69.799995 c
36.500004 69.199997 l
35.600002 68.5 34.700005 67.699997 33.900005 66.799995 c
33.100006 65.999992 32.400005 65.099998 32.000004 64.099998 c
31.200005 64 30.800003 64.099998 30.100004 64.199997 c
29.800005 64.299995 29.400003 64.299995 29.100004 64.399994 c
28.000004 64.599991 27.200005 63.999992 26.700005 63.199993 c
26.500004 62.899994 26.400005 62.499992 26.400005 62.099995 c
26.400005 61.699993 26.400005 61.299995 26.500006 60.999996 c
26.500006 60.899998 l
26.500006 60.799999 26.600006 60.799999 26.600006 60.699997 c
23.700006 60.699997 l
22.900007 60.699997 22.100006 60.299995 21.500006 59.799995 c
20.900005 59.199997 20.600006 58.499996 20.600006 57.599995 c
20.600006 33.700001 l
20.600006 32.900002 20.900005 32.100002 21.500006 31.5 c
22.100006 30.9 22.800005 30.6 23.700006 30.6 c
35.600006 30.6 l
36.400005 30.6 37.200005 30.9 37.800007 31.5 c
38.400005 32.099998 38.700008 32.799999 38.700008 33.700001 c
38.700008 47.299999 l
38.599998 47.299999 l
h
36.900002 54.299999 m
37 54.299999 37 54.299999 37.100002 54.299999 c
37.100002 47.799999 l
37.100002 33.700001 l
37.100002 33.299999 36.900002 32.900002 36.700001 32.600002 c
36.400002 32.300003 36 32.200001 35.600002 32.200001 c
23.6 32.200001 l
23.200001 32.200001 22.800001 32.400002 22.5 32.600002 c
22.200001 32.900002 22.1 33.300003 22.1 33.700001 c
22.1 57.800003 l
22.1 58.200005 22.300001 58.600002 22.5 58.900002 c
22.799999 59.200001 23.200001 59.300003 23.6 59.300003 c
32.299999 59.300003 l
31.9 58.700005 31.5 58.200005 31 57.700005 c
30.6 58.000004 30.1 58.200005 29.6 58.200005 c
29 58.200005 28.5 58.000004 28.1 57.600006 c
27.700001 57.200005 27.5 56.700005 27.5 56.100006 c
27.5 55.500008 27.700001 55.000008 28.1 54.600006 c
27.4 53.800007 27.200001 52.900005 27.4 52.100006 c
27.5 51.700005 27.699999 51.300007 27.9 51.000008 c
28.199999 50.700008 28.5 50.400009 28.9 50.200008 c
29.699999 49.900009 30.699999 49.900009 31.799999 50.60001 c
33 51.400009 34.099998 52.200008 35.200001 53.10001 c
35.799999 53.400002 36.400002 53.900002 36.900002 54.299999 c
h
38.599998 55.5 m
39.799999 56.700001 l
40.099998 57 40.099998 57.600002 39.799999 57.900002 c
39.5 58.200001 38.899998 58.200001 38.599998 57.900002 c
37.399998 56.700001 l
37.299999 56.700001 37.299999 56.600002 37.299999 56.600002 c
36.399998 55.800003 35.299999 55.000004 34.299999 54.200001 c
33.200001 53.400002 32.099998 52.600002 30.9 51.799999 c
30.299999 51.399998 29.799999 51.399998 29.5 51.5 c
29.299999 51.599998 29.200001 51.700001 29.1 51.799999 c
29 51.899998 28.9 52.099998 28.9 52.299999 c
28.799999 52.700001 28.9 53.200001 29.299999 53.599998 c
30.4 54.599998 31.299999 55.599998 32.200001 56.599998 c
33 57.5 33.700001 58.5 34.5 59.599998 c
34.700001 59.699997 34.799999 59.899998 34.799999 60.099998 c
34.799999 60.199997 34.799999 60.299999 34.799999 60.299999 c
34.799999 60.299999 34.799999 60.399998 34.799999 60.399998 c
34.899998 61.499996 35.099998 62.399998 35.5 63.199997 c
35.900002 63.999996 36.400002 64.699997 37.299999 65.5 c
37.599998 65.800003 37.599998 66.300003 37.299999 66.599998 c
37 66.900002 36.5 66.900002 36.200001 66.599998 c
35.200001 65.599998 34.600002 64.799995 34.100002 63.799999 c
33.700001 63 33.500004 62.099998 33.400002 61.099998 c
28.600002 61.099998 l
28.200003 61.099998 28.000002 61.299999 27.900002 61.5 c
27.800001 61.599998 27.800001 61.799999 27.800001 62 c
27.800001 62.200001 27.900002 62.299999 28.000002 62.5 c
28.100002 62.799999 28.400002 63 28.800001 62.900002 c
29.300001 62.800003 29.500002 62.800003 29.800001 62.700001 c
30.800001 62.5 31.400002 62.400002 32.700001 62.700001 c
32.900002 62.799999 33.200001 62.900002 33.299999 63.200001 c
33.700001 64.199997 34.399998 65 35.099998 65.900002 c
35.899998 66.700005 36.799999 67.5 37.599998 68.200005 c
37.699997 68.300003 37.799999 68.400002 37.899998 68.500008 c
38.199997 69.300011 l
38.399998 69.800011 l
38.799999 70.200012 40.499996 70.100014 42.199997 69.700012 c
42.899998 69.500015 43.599998 69.300011 44.199997 69.100014 c
44.799995 68.900017 45.199997 68.600014 45.499996 68.300011 c
45.699997 68.200012 45.699997 68.000008 45.699997 67.900009 c
45.699997 67.800011 45.599998 67.800011 45.599998 67.700012 c
45.399998 66.400009 45.199997 65.400009 45.099998 64.500015 c
44.599998 61.600014 44.299999 59.900017 44.399998 56.300014 c
44.399998 55.700016 44.199997 55.300014 43.899998 54.900013 c
43.599998 54.400013 43.099998 54.100014 42.499996 53.700012 c
41.399998 53.000011 40.799995 52.000011 40.199997 51.000011 c
39.799995 50.200012 39.299995 49.400013 38.599998 48.900013 c
38.599998 55.5 l
h
28.700001 55.299999 m
28.5 55.5 28.400002 55.799999 28.400002 56 c
28.400002 56.299999 28.500002 56.599998 28.700001 56.799999 c
28.900002 57 29.200001 57.099998 29.5 57.099998 c
29.799999 57.099998 30 57 30.200001 56.799999 c
29.799999 56.299999 29.299999 55.799999 28.700001 55.299999 c
h
f
Q
Q
q
0 0 10445.832 10367.7148 re
W*
q
[137.13501 0 0 137.143448 2112.7363 5400.0396] cm
/DeviceRGB {} CS
[0 0.0157 0.2353] SC
/DeviceRGB {} cs
[0 0.0157 0.2353] sc
1.26 20 m
1.12 20 1 19.879999 1 19.74 c
1 7.76 l
1 7.62 1.12 7.5 1.26 7.5 c
3.86 7.5 l
4 7.5 4.12 7.62 4.12 7.76 c
4.12 19.74 l
4.12 19.879999 4 20 3.86 20 c
1.26 20 l
h
6.38 20 m
6.22 20 6.12 19.879999 6.12 19.74 c
6.12 7.76 l
6.12 7.62 6.22 7.5 6.38 7.5 c
11.26 7.5 l
12.780001 7.5 13.980001 7.88 14.82 8.66 c
16.06 9.78 16.479999 11.9 15.879999 13.46 c
15.659999 14.020001 15.279999 14.54 14.799999 14.92 c
14.52 15.14 14.219999 15.3 13.919999 15.46 c
14.779999 16.82 16.08 19.58 16.08 19.58 c
16.1 19.620001 16.139999 19.68 16.139999 19.74 c
16.139999 19.879999 16.019999 20 15.879999 20 c
12.919999 20 l
12.839999 20 12.739999 19.940001 12.699999 19.860001 c
10.959999 16.040001 l
10.339999 16.080002 9.859999 16.060001 9.219999 16.060001 c
9.219999 19.740002 l
9.219999 19.880001 9.099999 20.000002 8.959999 20.000002 c
6.379999 20.000002 l
6.38 20 l
h
9.22 13.28 m
9.22 13.28 11.74 13.56 12.620001 12.98 c
12.960001 12.759999 13.160001 12.219999 13.160001 11.82 c
13.14 11.38 12.920001 10.92 12.56 10.639999 c
12.18 10.32 11.240001 10.219999 10.76 10.219999 c
9.22 10.259999 l
9.22 13.279999 l
9.22 13.28 l
h
f
Q
q
[113.372169 0 0 113.379143 4553.3115 5875.3252] cm
/DeviceRGB {} CS
[0 0.0157 0.2353] SC
/DeviceRGB {} cs
[0 0.0157 0.2353] sc
1.48 4.88 m
2.28 4.88 2.94 5.54 2.94 6.36 c
2.94 19.4 l
2.94 19.719999 2.68 20 2.34 20 c
2 20 1.72 19.719999 1.72 19.4 c
1.72 6.36 l
1.72 6.22 1.62 6.099999 1.48 6.099999 c
1.34 6.099999 1.22 6.219999 1.22 6.36 c
1.22 12.44 l
1.22 12.78 0.94 13.04 0.6 13.04 c
0.28 13.04 0 12.78 0 12.44 c
0 6.36 l
0 5.54 0.66 4.88 1.48 4.88 c
1.48 4.88 l
h
11.04 4.9 m
15.219999 4.9 18.6 8.280001 18.6 12.440001 c
18.6 16.620001 15.22 20 11.040001 20 c
6.680001 20 l
5.500001 20 4.540001 19.040001 4.540001 17.860001 c
4.540001 7.18 l
4.540001 6.86 4.820001 6.58 5.140001 6.58 c
5.480001 6.58 5.760001 6.860001 5.760001 7.18 c
5.760001 17.860001 l
5.760001 18.380001 6.160001 18.780001 6.680001 18.780001 c
11.040001 18.780001 l
14.540001 18.780001 17.380001 15.940001 17.380001 12.440001 c
17.380001 8.960001 14.540001 6.1 11.040001 6.1 c
10.720001 6.1 10.440001 5.84 10.440001 5.500001 c
10.440001 5.160001 10.72 4.900001 11.040001 4.900001 c
11.04 4.9 l
h
6.84 6.58 m
11.04 6.58 l
14.28 6.58 16.92 9.22 16.92 12.440001 c
16.92 15.68 14.28 18.32 11.04 18.32 c
10.72 18.32 10.44 18.039999 10.44 17.699999 c
10.44 17.359999 10.719999 17.099998 11.04 17.099998 c
13.6 17.099998 15.7 14.999998 15.7 12.439999 c
15.7 9.879999 13.6 7.799999 11.04 7.799999 c
7.46 7.799999 l
7.46 17.699999 l
7.46 18.039999 7.18 18.32 6.84 18.32 c
6.500001 18.32 6.24 18.039999 6.24 17.699999 c
6.24 7.179998 l
6.24 6.859998 6.5 6.579999 6.84 6.579999 c
6.84 6.58 l
h
23.700001 4.88 m
31.120001 4.88 l
31.92 4.88 32.580002 5.54 32.580002 6.34 c
32.580002 7.14 31.960001 7.82 31.160002 7.82 c
23.700001 7.82 l
23.400002 7.82 23.140001 8.06 23.140001 8.38 c
23.140001 8.68 23.400002 8.940001 23.700001 8.940001 c
24.040001 8.940001 24.320002 9.200001 24.320002 9.540001 c
24.320002 9.880001 24.040001 10.160001 23.700001 10.160001 c
22.720001 10.160001 21.940001 9.360001 21.940001 8.380001 c
21.940001 7.400002 22.720001 6.600001 23.700001 6.600001 c
31.120001 6.600001 l
31.26 6.600001 31.360001 6.480001 31.360001 6.340001 c
31.360001 6.200001 31.26 6.100001 31.120001 6.100001 c
23.700001 6.100001 l
22.440001 6.100001 21.42 7.120001 21.42 8.380001 c
21.42 9.640001 22.440001 10.660001 23.700001 10.660001 c
29.080002 10.660001 l
30.060001 10.660001 30.860003 11.460001 30.860003 12.460001 c
30.860003 13.440001 30.060003 14.220001 29.080002 14.220001 c
23.700001 14.220001 l
22.440001 14.220001 21.42 15.240002 21.42 16.500002 c
21.42 17.760002 22.440001 18.780003 23.700001 18.780003 c
31.960001 18.780003 l
32.299999 18.780003 32.580002 19.060003 32.580002 19.400003 c
32.580002 19.740004 32.300003 20.000004 31.960001 20.000004 c
23.700001 20.000004 l
21.76 20.000004 20.200001 18.440004 20.200001 16.500004 c
20.200001 14.580004 21.76 13.000004 23.700001 13.000004 c
29.080002 13.000004 l
29.400002 13.000004 29.640001 12.760004 29.640001 12.460004 c
29.640001 12.120004 29.400002 11.880004 29.080002 11.880004 c
23.700001 11.880004 l
21.780001 11.880004 20.200001 10.300004 20.200001 8.380004 c
20.200001 6.440004 21.780001 4.880004 23.700001 4.880004 c
23.700001 4.88 l
h
23.700001 14.74 m
29.080002 14.74 l
29.420002 14.74 29.700003 15 29.700003 15.34 c
29.700003 15.68 29.420002 15.96 29.080002 15.96 c
23.700001 15.96 l
23.400002 15.96 23.140001 16.200001 23.140001 16.5 c
23.140001 16.82 23.400002 17.059999 23.700001 17.059999 c
24.040001 17.059999 24.300001 17.34 24.300001 17.68 c
24.300001 18 24.040001 18.280001 23.700001 18.280001 c
22.720001 18.280001 21.92 17.480001 21.92 16.5 c
21.92 15.519999 22.719999 14.74 23.700001 14.74 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
